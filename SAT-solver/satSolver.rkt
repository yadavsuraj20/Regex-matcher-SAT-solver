#lang racket

(require "utilities.rkt")

(define assign #hash())

; Fill in your code here. Should finally define a function
; called dpll which returns true or false. Should additionally
; store the satisfying assignment in the variable assign.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;empty-clause?
(define (empty-clause? l)
  (cond [(null? l) #f]
        [(equal? (car l) '()) #t]
        [else (empty-clause? (cdr l))]))
;unit-clause
(define (unit-clause l)
  (cond [(null? l) '()]
        [(null? (car l)) (unit-clause (cdr l))]
        [(null? (cdr (car l))) (car l)]
        [else (unit-clause (cdr l))]))
;is-present?
(define (is-present? x l)
  (cond [(null? l) #f]
        [(= x (car l)) #t]
        [else (is-present? x (cdr l))]))
;unit-improve
(define (unit-improve l x)
  (map (lambda (y) (remove* (list (- (car x))) y)) (removing-clauses l (car x))))
;removing-clauses
(define (removing-clauses l x)
  (filter (lambda (y) (not (is-present? x y))) l))
;;same-sign-element
;(define (same-sign-element l l1)
;  (cond [(null? l) '()]
;        [(not (is-present? (- (car l)) (cdr l))) (list (car l))]
;        ;[(is-present? (car l) l1) (same-sign-element (cdr l) l1)]
;        [else (same-sign-element (remove* (list (car l) (- (car l))) l) (cons (car l) l1))]))
;same-sign-element
(define (same-sign-element l l1)
  (cond [(null? l) '()]
        [(is-present? (car l) l1) (same-sign-element (cdr l) l1)]
        [(is-present? (- (car l)) (cdr l)) (same-sign-element (cdr l) (cons (car l) (cons (- (car l)) l1)))]
        [else (list (car l))]))
;Assign
(define (Assign val)
  (if (> val 0) (set! assign (dict-set assign val #t))
                (set! assign (dict-set assign (- val) #f))))
;DPLL
(define (DPLL l)
  (let* ([single (unit-clause l)]
         [same-sign (same-sign-element (append* l) '())])
    (cond [(null? l) #t]
          [(empty-clause? l) #f]
          [(not (null? single)) (let* ([val (car single)])
                                  (begin (Assign val)
                                         (DPLL (unit-improve l single))))]
          [(not (null? same-sign)) (let* ([val (car same-sign)])
                                     (begin (Assign val)
                                            (DPLL (filter (lambda (y) (not (is-present? (car same-sign) y))) l))))]
          [(DPLL (unit-improve l (list (caar l)))) (let* ([val (caar l)])
                                                     (begin (Assign val)
                                                            #t))]
          [(DPLL (unit-improve l (list (- (caar l))))) (let* ([val (- (caar l))])
                                                         (begin (Assign val)
                                                                #t))]
          [else #f])))
;inverse
(define (inverse t)
  (cond [(And? t) (append (inverse (And-x t)) (inverse (And-y t)))]
        [(Or? t) (list (append* (append (inverse (Or-x t)) (inverse (Or-y t)))))]
        [(Var? t) (list (list (Var-lit t)))]
        [(Not? t) (list (list (- (caar (inverse (Not-e t))))))]))
;dpll
(define (dpll t)
  (set! assign #hash())
  (if (DPLL (inverse t)) #t (begin (set! assign #hash()) #f)))

; Testcase
(define 5queens
  (list '(11 12 13 14 15)
        '(-11 -12)
        '(-11 -13)
        '(-11 -14)
        '(-11 -15)
        '(-12 -13)
        '(-12 -14)
        '(-12 -15)
        '(-13 -14)
        '(-13 -15)
        '(-14 -15)
        '(21 22 23 24 25)
        '(-21 -22)
        '(-21 -23)
        '(-21 -24)
        '(-21 -25)
        '(-22 -23)
        '(-22 -24)
        '(-22 -25)
        '(-23 -24)
        '(-23 -25)
        '(-24 -25)
        '(31 32 33 34 35)
        '(-31 -32)
        '(-31 -33)
        '(-31 -34)
        '(-31 -35)
        '(-32 -33)
        '(-32 -34)
        '(-32 -35)
        '(-33 -34)
        '(-33 -35)
        '(-34 -35)
        '(41 42 43 44 45)
        '(-41 -42)
        '(-41 -43)
        '(-41 -44)
        '(-41 -45)
        '(-42 -43)
        '(-42 -44)
        '(-42 -45)
        '(-43 -44)
        '(-43 -45)
        '(-44 -45)
        '(51 52 53 54 55)
        '(-51 -52)
        '(-51 -53)
        '(-51 -54)
        '(-51 -55)
        '(-52 -53)
        '(-52 -54)
        '(-52 -55)
        '(-53 -54)
        '(-53 -55)
        '(-54 -55)
        '(-11 -21)
        '(-11 -31)
        '(-11 -41)
        '(-11 -51)
        '(-21 -31)
        '(-21 -41)
        '(-21 -51)
        '(-31 -41)
        '(-31 -51)
        '(-41 -51)
        '(-12 -22)
        '(-12 -32)
        '(-12 -42)
        '(-12 -52)
        '(-22 -32)
        '(-22 -42)
        '(-22 -52)
        '(-32 -42)
        '(-32 -52)
        '(-42 -52)
        '(-13 -23)
        '(-13 -33)
        '(-13 -43)
        '(-13 -53)
        '(-23 -33)
        '(-23 -43)
        '(-23 -53)
        '(-33 -43)
        '(-33 -53)
        '(-43 -53)
        '(-14 -24)
        '(-14 -34)
        '(-14 -44)
        '(-14 -54)
        '(-24 -34)
        '(-24 -44)
        '(-24 -54)
        '(-34 -44)
        '(-34 -54)
        '(-44 -54)
        '(-15 -25)
        '(-15 -35)
        '(-15 -45)
        '(-15 -55)
        '(-25 -35)
        '(-25 -45)
        '(-25 -55)
        '(-35 -45)
        '(-35 -55)
        '(-45 -55)
        '(-11 -22)
        '(-11 -33)
        '(-22 -33)
        '(-11 -44)
        '(-22 -44)
        '(-33 -44)
        '(-11 -55)
        '(-22 -55)
        '(-33 -55)
        '(-44 -55)
        '(-12 -23)
        '(-12 -34)
        '(-23 -34)
        '(-12 -45)
        '(-23 -45)
        '(-34 -45)
        '(-13 -24)
        '(-13 -35)
        '(-24 -35)
        '(-14 -25)
        '(-21 -32)
        '(-21 -43)
        '(-32 -43)
        '(-21 -54)
        '(-32 -54)
        '(-43 -54)
        '(-31 -42)
        '(-31 -53)
        '(-42 -53)
        '(-41 -52)
        '(-12 -21)
        '(-13 -22)
        '(-13 -31)
        '(-22 -31)
        '(-14 -23)
        '(-14 -32)
        '(-23 -32)
        '(-14 -41)
        '(-23 -41)
        '(-32 -41)
        '(-15 -24)
        '(-15 -33)
        '(-24 -33)
        '(-15 -42)
        '(-24 -42)
        '(-33 -42)
        '(-15 -51)
        '(-24 -51)
        '(-33 -51)
        '(-42 -51)
        '(-25 -34)
        '(-25 -43)
        '(-34 -43)
        '(-25 -52)
        '(-34 -52)
        '(-43 -52)
        '(-35 -44)
        '(-35 -53)
        '(-44 -53)
        '(-45 -54)))

(define satisfy? (dpll (parseExp 5queens)))